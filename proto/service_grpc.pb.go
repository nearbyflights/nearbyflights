// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NearbyFlightsClient is the client API for NearbyFlights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NearbyFlightsClient interface {
	Receive(ctx context.Context, opts ...grpc.CallOption) (NearbyFlights_ReceiveClient, error)
}

type nearbyFlightsClient struct {
	cc grpc.ClientConnInterface
}

func NewNearbyFlightsClient(cc grpc.ClientConnInterface) NearbyFlightsClient {
	return &nearbyFlightsClient{cc}
}

func (c *nearbyFlightsClient) Receive(ctx context.Context, opts ...grpc.CallOption) (NearbyFlights_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NearbyFlights_serviceDesc.Streams[0], "/proto.NearbyFlights/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &nearbyFlightsReceiveClient{stream}
	return x, nil
}

type NearbyFlights_ReceiveClient interface {
	Send(*Options) error
	Recv() (*Flight, error)
	grpc.ClientStream
}

type nearbyFlightsReceiveClient struct {
	grpc.ClientStream
}

func (x *nearbyFlightsReceiveClient) Send(m *Options) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nearbyFlightsReceiveClient) Recv() (*Flight, error) {
	m := new(Flight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NearbyFlightsServer is the server API for NearbyFlights service.
// All implementations must embed UnimplementedNearbyFlightsServer
// for forward compatibility
type NearbyFlightsServer interface {
	Receive(NearbyFlights_ReceiveServer) error
	mustEmbedUnimplementedNearbyFlightsServer()
}

// UnimplementedNearbyFlightsServer must be embedded to have forward compatible implementations.
type UnimplementedNearbyFlightsServer struct {
}

func (UnimplementedNearbyFlightsServer) Receive(NearbyFlights_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedNearbyFlightsServer) mustEmbedUnimplementedNearbyFlightsServer() {}

// UnsafeNearbyFlightsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NearbyFlightsServer will
// result in compilation errors.
type UnsafeNearbyFlightsServer interface {
	mustEmbedUnimplementedNearbyFlightsServer()
}

func RegisterNearbyFlightsServer(s *grpc.Server, srv NearbyFlightsServer) {
	s.RegisterService(&_NearbyFlights_serviceDesc, srv)
}

func _NearbyFlights_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NearbyFlightsServer).Receive(&nearbyFlightsReceiveServer{stream})
}

type NearbyFlights_ReceiveServer interface {
	Send(*Flight) error
	Recv() (*Options, error)
	grpc.ServerStream
}

type nearbyFlightsReceiveServer struct {
	grpc.ServerStream
}

func (x *nearbyFlightsReceiveServer) Send(m *Flight) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nearbyFlightsReceiveServer) Recv() (*Options, error) {
	m := new(Options)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NearbyFlights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NearbyFlights",
	HandlerType: (*NearbyFlightsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _NearbyFlights_Receive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
